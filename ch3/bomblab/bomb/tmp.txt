Border relations with Canada have never been better.
    参数传递，通过寄存器最多6个，其余的用栈来传递参数
    1   2   3   4   5   6
    rdi rsi rdx rcx r8 r9
    返回值 rax
    浮点数参数传递
    xmm0~xmm7
    返回值 xmm0

我们首先找到 phase_1 函数
0000000000400ee0 <phase_1>:
  400ee0:   48 83 ec 08             sub    $0x8,%rsp
  400ee4:   be 00 24 40 00          mov    $0x402400,%esi
  400ee9:   e8 4a 04 00 00          callq  401338 <strings_not_equal>
  400eee:   85 c0                   test   %eax,%eax
  400ef0:   74 05                   je     400ef7 <phase_1+0x17>
  400ef2:   e8 43 05 00 00          callq  40143a <explode_bomb>
  400ef7:   48 83 c4 08             add    $0x8,%rsp
  400efb:   c3                      retq   

接着发现 0x402400 和 <strings_not_equal>
  400ee4:   be 00 24 40 00          mov    $0x402400,%esi
  400ee9:   e8 4a 04 00 00          callq  401338 <strings_not_equal>
  400eee:   85 c0                   test   %eax,%eax

试着debug
x/s $esi 发现是我们输入的内容

看看 0x402400 是什么
x/s 0x402400 发现是字符串
0x402400:   "Border relations with Canada have never been better."


然后发现巨长的代码
0000000000401338 <strings_not_equal>:
  401338:   41 54                   push   %r12
  40133a:   55                      push   %rbp
  40133b:   53                      push   %rbx
  40133c:   48 89 fb                mov    %rdi,%rbx
  40133f:   48 89 f5                mov    %rsi,%rbp
  401342:   e8 d4 ff ff ff          callq  40131b <string_length>
  401347:   41 89 c4                mov    %eax,%r12d
  40134a:   48 89 ef                mov    %rbp,%rdi
  40134d:   e8 c9 ff ff ff          callq  40131b <string_length>
  401352:   ba 01 00 00 00          mov    $0x1,%edx
  401357:   41 39 c4                cmp    %eax,%r12d
  40135a:   75 3f                   jne    40139b <strings_not_equal+0x63>
  40135c:   0f b6 03                movzbl (%rbx),%eax
  40135f:   84 c0                   test   %al,%al
  401361:   74 25                   je     401388 <strings_not_equal+0x50>
  401363:   3a 45 00                cmp    0x0(%rbp),%al
  401366:   74 0a                   je     401372 <strings_not_equal+0x3a>
  401368:   eb 25                   jmp    40138f <strings_not_equal+0x57>
  40136a:   3a 45 00                cmp    0x0(%rbp),%al
  40136d:   0f 1f 00                nopl   (%rax)
  401370:   75 24                   jne    401396 <strings_not_equal+0x5e>
  401372:   48 83 c3 01             add    $0x1,%rbx
  401376:   48 83 c5 01             add    $0x1,%rbp
  40137a:   0f b6 03                movzbl (%rbx),%eax
  40137d:   84 c0                   test   %al,%al
  40137f:   75 e9                   jne    40136a <strings_not_equal+0x32>
  401381:   ba 00 00 00 00          mov    $0x0,%edx
  401386:   eb 13                   jmp    40139b <strings_not_equal+0x63>
  401388:   ba 00 00 00 00          mov    $0x0,%edx
  40138d:   eb 0c                   jmp    40139b <strings_not_equal+0x63>
  40138f:   ba 01 00 00 00          mov    $0x1,%edx
  401394:   eb 05                   jmp    40139b <strings_not_equal+0x63>
  401396:   ba 01 00 00 00          mov    $0x1,%edx
  40139b:   89 d0                   mov    %edx,%eax
  40139d:   5b                      pop    %rbx
  40139e:   5d                      pop    %rbp
  40139f:   41 5c                   pop    %r12
  4013a1:   c3                      retq  



phase_2

  400e4e: e8 4b 06 00 00        callq  40149e <read_line>
  400e53: 48 89 c7              mov    %rax,%rdi
  400e56: e8 a1 00 00 00        callq  400efc <phase_2>


rdi 是我们输入的字符串的首地址
发现 %rsi 
read_six_numbers

rdi 保存我们输入的字符串内容的首地址
rsp 传给 rsi 作为 read_six_numbers 的参数
即 rsi = rsp(phase_2)

之后调用 read_six_numbers
此时 rdx = rsi = rsp(phase_2)

我们会发现
rdi 不变或没使用
esi = 0x4025c3
rdx = rsi = rsp(phase_2)
rcx = rsi + 4
r8 = rsi + 8
r9 = rsi + c(12)

  esi = 0x4025c3 其实是 sscanf 的第一个参数
  (gdb) x/s 0x4025c3
  0x4025c3: "%d %d %d %d %d %d"

第5、6参数：
rsp 是 read_six_numbers 的栈指针，在其栈内存放地址映射到 phase_2 的栈里(rsi)
[rsp] = rsi + 0x10
[rsp + 8] = rsi + 0x14

对 phase_2 汇编代码阅读

(%rsp) 参数一 = 1
rbx = %rsp + 0x4
rbp = rsp + 0x18

%eax = -0x4(%rbx)
add %eax, %eax



0000000000400efc <phase_2>:
  400efc: 55                    push   %rbp
  400efd: 53                    push   %rbx
  400efe: 48 83 ec 28           sub    $0x28,%rsp
  400f02: 48 89 e6              mov    %rsp,%rsi
  400f05: e8 52 05 00 00        callq  40145c <read_six_numbers>
  400f0a: 83 3c 24 01           cmpl   $0x1,(%rsp)
  400f0e: 74 20                 je     400f30 <phase_2+0x34>
  400f10: e8 25 05 00 00        callq  40143a <explode_bomb>
  400f15: eb 19                 jmp    400f30 <phase_2+0x34>
  400f17: 8b 43 fc              mov    -0x4(%rbx),%eax
  400f1a: 01 c0                 add    %eax,%eax
  400f1c: 39 03                 cmp    %eax,(%rbx)
  400f1e: 74 05                 je     400f25 <phase_2+0x29>
  400f20: e8 15 05 00 00        callq  40143a <explode_bomb>
  400f25: 48 83 c3 04           add    $0x4,%rbx
  400f29: 48 39 eb              cmp    %rbp,%rbx
  400f2c: 75 e9                 jne    400f17 <phase_2+0x1b>
  400f2e: eb 0c                 jmp    400f3c <phase_2+0x40>
  400f30: 48 8d 5c 24 04        lea    0x4(%rsp),%rbx
  400f35: 48 8d 6c 24 18        lea    0x18(%rsp),%rbp
  400f3a: eb db                 jmp    400f17 <phase_2+0x1b>
  400f3c: 48 83 c4 28           add    $0x28,%rsp
  400f40: 5b                    pop    %rbx
  400f41: 5d                    pop    %rbp
  400f42: c3                    retq   


000000000040145c <read_six_numbers>:
  40145c: 48 83 ec 18           sub    $0x18,%rsp
  401460: 48 89 f2              mov    %rsi,%rdx
  401463: 48 8d 4e 04           lea    0x4(%rsi),%rcx
  401467: 48 8d 46 14           lea    0x14(%rsi),%rax
  40146b: 48 89 44 24 08        mov    %rax,0x8(%rsp)
  401470: 48 8d 46 10           lea    0x10(%rsi),%rax
  401474: 48 89 04 24           mov    %rax,(%rsp)
  401478: 4c 8d 4e 0c           lea    0xc(%rsi),%r9
  40147c: 4c 8d 46 08           lea    0x8(%rsi),%r8
  401480: be c3 25 40 00        mov    $0x4025c3,%esi
  401485: b8 00 00 00 00        mov    $0x0,%eax
  40148a: e8 61 f7 ff ff        callq  400bf0 <__isoc99_sscanf@plt>
  40148f: 83 f8 05              cmp    $0x5,%eax
  401492: 7f 05                 jg     401499 <read_six_numbers+0x3d>
  401494: e8 a1 ff ff ff        callq  40143a <explode_bomb>
  401499: 48 83 c4 18           add    $0x18,%rsp
  40149d: c3                    retq  



(gdb) x/s 0x4025c3
0x4025c3: "%d %d %d %d %d %d"





phase_3

  400e6a: e8 2f 06 00 00        callq  40149e <read_line>
  400e6f: 48 89 c7              mov    %rax,%rdi
  400e72: e8 cc 00 00 00        callq  400f43 <phase_3>


0000000000400f43 <phase_3>:
  400f43: 48 83 ec 18           sub    $0x18,%rsp
  400f47: 48 8d 4c 24 0c        lea    0xc(%rsp),%rcx
  400f4c: 48 8d 54 24 08        lea    0x8(%rsp),%rdx
  400f51: be cf 25 40 00        mov    $0x4025cf,%esi
  400f56: b8 00 00 00 00        mov    $0x0,%eax
  400f5b: e8 90 fc ff ff        callq  400bf0 <__isoc99_sscanf@plt>
  400f60: 83 f8 01              cmp    $0x1,%eax
  400f63: 7f 05                 jg     400f6a <phase_3+0x27>
  400f65: e8 d0 04 00 00        callq  40143a <explode_bomb>
  400f6a: 83 7c 24 08 07        cmpl   $0x7,0x8(%rsp)
  400f6f: 77 3c                 ja     400fad <phase_3+0x6a>
  400f71: 8b 44 24 08           mov    0x8(%rsp),%eax
  400f75: ff 24 c5 70 24 40 00  jmpq   *0x402470(,%rax,8)
  400f7c: b8 cf 00 00 00        mov    $0xcf,%eax
  400f81: eb 3b                 jmp    400fbe <phase_3+0x7b>
  400f83: b8 c3 02 00 00        mov    $0x2c3,%eax
  400f88: eb 34                 jmp    400fbe <phase_3+0x7b>
  400f8a: b8 00 01 00 00        mov    $0x100,%eax
  400f8f: eb 2d                 jmp    400fbe <phase_3+0x7b>
  400f91: b8 85 01 00 00        mov    $0x185,%eax
  400f96: eb 26                 jmp    400fbe <phase_3+0x7b>
  400f98: b8 ce 00 00 00        mov    $0xce,%eax
  400f9d: eb 1f                 jmp    400fbe <phase_3+0x7b>
  400f9f: b8 aa 02 00 00        mov    $0x2aa,%eax
  400fa4: eb 18                 jmp    400fbe <phase_3+0x7b>
  400fa6: b8 47 01 00 00        mov    $0x147,%eax
  400fab: eb 11                 jmp    400fbe <phase_3+0x7b>
  400fad: e8 88 04 00 00        callq  40143a <explode_bomb>
  400fb2: b8 00 00 00 00        mov    $0x0,%eax
  400fb7: eb 05                 jmp    400fbe <phase_3+0x7b>
  400fb9: b8 37 01 00 00        mov    $0x137,%eax
  400fbe: 3b 44 24 0c           cmp    0xc(%rsp),%eax
  400fc2: 74 05                 je     400fc9 <phase_3+0x86>
  400fc4: e8 71 04 00 00        callq  40143a <explode_bomb>
  400fc9: 48 83 c4 18           add    $0x18,%rsp
  400fcd: c3                    retq   

(gdb) x/x 0x402470
0x402470: 0x00400f7c

以 1 为例子 0x402470 + 8
(gdb) x/x 0x402478
0x402478: 0x00400fb9

此时跳转 400fb9
eax = 0x137 = 311
eax = 0xc(%rsp)






phase_4

在 main 中，rdi 为调用 phase_4 函数的参数，rdi 是我们输入的字符串的首地址

之后在 phase_4 函数里，我们又调用了 sscanf 函数
sscanf(s,"%d...", &a,...);
它需要以下参数
  (rdi已经有了)
  esi = 0x4025cf
    (gdb) x/s 0x4025cf
    0x4025cf: "%d %d"
  rdx = %rsp + 0x8
  rcx = %rsp + 0xc

输入两个整数之后，
它会比较 rdx 与 0xe 的大小，而且必须 rdx <= 0xe
cmpl   $0xe,0x8(%rsp)  ; (rdx, 0xe)
jbe    40103a <phase_4+0x2e>


之后调用 func4 函数，在这之前设置参数
edi = %rsp + 0x8 = rdx
esi = 0x0
edx = 0xe

在查看 func4 汇编之前，我们先搞清楚 phase_4 不会爆炸的条件
要求 func4 返回时
  eax = 0
  M[%rsp + 0xc] = 0




  400e86: e8 13 06 00 00        callq  40149e <read_line>
  400e8b: 48 89 c7              mov    %rax,%rdi
  400e8e: e8 79 01 00 00        callq  40100c <phase_4>


000000000040100c <phase_4>:
  40100c: 48 83 ec 18           sub    $0x18,%rsp
  401010: 48 8d 4c 24 0c        lea    0xc(%rsp),%rcx
  401015: 48 8d 54 24 08        lea    0x8(%rsp),%rdx
  40101a: be cf 25 40 00        mov    $0x4025cf,%esi
  40101f: b8 00 00 00 00        mov    $0x0,%eax
  401024: e8 c7 fb ff ff        callq  400bf0 <__isoc99_sscanf@plt>
  401029: 83 f8 02              cmp    $0x2,%eax
  40102c: 75 07                 jne    401035 <phase_4+0x29>
  40102e: 83 7c 24 08 0e        cmpl   $0xe,0x8(%rsp)
  401033: 76 05                 jbe    40103a <phase_4+0x2e>
  401035: e8 00 04 00 00        callq  40143a <explode_bomb>
  40103a: ba 0e 00 00 00        mov    $0xe,%edx
  40103f: be 00 00 00 00        mov    $0x0,%esi
  401044: 8b 7c 24 08           mov    0x8(%rsp),%edi
  401048: e8 81 ff ff ff        callq  400fce <func4>
  40104d: 85 c0                 test   %eax,%eax
  40104f: 75 07                 jne    401058 <phase_4+0x4c>
  401051: 83 7c 24 0c 00        cmpl   $0x0,0xc(%rsp)
  401056: 74 05                 je     40105d <phase_4+0x51>
  401058: e8 dd 03 00 00        callq  40143a <explode_bomb>
  40105d: 48 83 c4 18           add    $0x18,%rsp
  401061: c3                    retq   

0000000000400fce <func4>:
  400fce: 48 83 ec 08           sub    $0x8,%rsp
  400fd2: 89 d0                 mov    %edx,%eax ; eax = 14
  400fd4: 29 f0                 sub    %esi,%eax ; eax = 14 - 0 = 14
  400fd6: 89 c1                 mov    %eax,%ecx ; ecx = 14
  400fd8: c1 e9 1f              shr    $0x1f,%ecx ; ecx = 14 >> 31(逻辑) = 0
  400fdb: 01 c8                 add    %ecx,%eax ; eax = 14 + s = 14
  400fdd: d1 f8                 sar    %eax      ; eax = 14 >> 1(算术) = 7
  400fdf: 8d 0c 30              lea    (%rax,%rsi,1),%ecx  ; ecx = 7 + 0 = 7
  400fe2: 39 f9                 cmp    %edi,%ecx           ; 注意 edi = rdx
  400fe4: 7e 0c                 jle    400ff2 <func4+0x24> ; ecx <= edi 即 7 <= rdx
  400fe6: 8d 51 ff              lea    -0x1(%rcx),%edx
  400fe9: e8 e0 ff ff ff        callq  400fce <func4>
  400fee: 01 c0                 add    %eax,%eax
  400ff0: eb 15                 jmp    401007 <func4+0x39>
  400ff2: b8 00 00 00 00        mov    $0x0,%eax           ; eax = 0
  400ff7: 39 f9                 cmp    %edi,%ecx           
  400ff9: 7d 0c                 jge    401007 <func4+0x39> ; ecx >= edi 即 7 >= rdx
  400ffb: 8d 71 01              lea    0x1(%rcx),%esi
  400ffe: e8 cb ff ff ff        callq  400fce <func4>
  401003: 8d 44 00 01           lea    0x1(%rax,%rax,1),%eax
  401007: 48 83 c4 08           add    $0x8,%rsp
  40100b: c3                    retq 






phase_5

在 main 中，rdi 为调用 phase_5 函数的参数，rdi 是我们输入的字符串的首地址

在 phase_5 中，这段应该是溢出检测
  40106a: 64 48 8b 04 25 28 00  mov    %fs:0x28,%rax  ; 金丝雀值
  401071: 00 00 
  401073: 48 89 44 24 18        mov    %rax,0x18(%rsp)
...
  4010d9: 48 8b 44 24 18        mov    0x18(%rsp),%rax
  4010de: 64 48 33 04 25 28 00  xor    %fs:0x28,%rax
  4010e5: 00 00 
  4010e7: 74 05                 je     4010ee <phase_5+0x8c>
  4010e9: e8 42 fa ff ff        callq  400b30 <__stack_chk_fail@plt> ; 检测是否溢出
  4010ee: 48 83 c4 20           add    $0x20,%rsp
  4010f2: 5b                    pop    %rbx
  4010f3: c3                    retq   

之后 phase_5 调用 string_length，查看输入的字符串长度是否等于 6，否则爆炸

接着继续阅读汇编代码。。。
  4010a4: 48 83 c0 01           add    $0x1,%rax
  4010a8: 48 83 f8 06           cmp    $0x6,%rax

...
  4010ae: c6 44 24 16 00        movb   $0x0,0x16(%rsp)
  4010b3: be 5e 24 40 00        mov    $0x40245e,%esi
  4010b8: 48 8d 7c 24 10        lea    0x10(%rsp),%rdi
  4010bd: e8 76 02 00 00        callq  401338 <strings_not_equal>
  4010c2: 85 c0                 test   %eax,%eax
  4010c4: 74 13                 je     4010d9 <phase_5+0x77>
快速浏览后，发现需要先让
rax = 6
eax = 0 <strings_not_equal>
然后检查金丝雀值，最后就能退出了

有了这些信息后，就要开始仔细读 phase_5 汇编代码了。。。



movzbl 0x4024b0(%rdx),%edx  ; edx = [cl + 0x4024b0]
对 0x4024b0 查看内容，头大
  (gdb) x/30s 0x4024b0
  0x4024b0 <array.3449>:  "maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?"
  0x4024f8: "Curses, you've found the secret phase!"
  0x40251f: ""
  0x402520: "But finding it and solving it are quite different..."
  0x402555: ""
  0x402556: ""
  0x402557: ""
  0x402558: "Congratulations! You've defused the bomb!"
  0x402582: "Well..."
  0x40258a: "OK. :-)"
  0x402592: "Invalid phase%s\n"
  0x4025a3: "\nBOOM!!!"
  0x4025ac: "The bomb has blown up."
  0x4025c3: "%d %d %d %d %d %d"
  0x4025d5: "Error: Premature EOF on stdin"
  0x4025f3: "GRADE_BOMB"
  0x4025fe: "Error: Input line too long"
  0x402619: "%d %d %s"
  0x402622: "DrEvil"
  0x402629: "greatwhite.ics.cs.cmu.edu"
  0x402643: "angelshark.ics.cs.cmu.edu"
  0x40265d: "makoshark.ics.cs.cmu.edu"
  0x402676: ""
  0x402677: ""
  0x402678: "Program timed out after %d seconds\n"
  0x40269c: ""
  0x40269d: ""
  0x40269e: ""
  0x40269f: ""
  0x4026a0: "Error: HTTP request failed with error %d: %s"

(gdb) x/s 0x4024B9
0x4024b9 <array.3449+9>:  "fotvbylSo you think you can stop the bomb with ctrl-c, do you?"
(gdb) x/s 0x4024BF
0x4024bf <array.3449+15>: "lSo you think you can stop the bomb with ctrl-c, do you?"
(gdb) x/s 0x4024BE
0x4024be <array.3449+14>: "ylSo you think you can stop the bomb with ctrl-c, do you?"
(gdb) x/s 0x4024B5
0x4024b5 <array.3449+5>:  "ersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?"
(gdb) x/s 0x4024B6
0x4024b6 <array.3449+6>:  "rsnfotvbylSo you think you can stop the bomb with ctrl-c, do you?"
(gdb) x/s 0x4024B7
0x4024b7 <array.3449+7>:  "snfotvbylSo you think you can stop the bomb with ctrl-c, do you?"

(gdb) x/s 0x40245e
0x40245e: "flyers"

(gdb) print /x "flyers"
$3 = {0x66, 0x6c, 0x79, 0x65, 0x72, 0x73, 0x0}
建立映射
f: 0x4024b0 + 9 = 0x4024B9
l: 0x4024b0 + 15 = 0x4024BF
y: 0x4024b0 + 14 = 0x4024BE
e: 0x4024b0 + 5 = 0x4024B5
r: 0x4024b0 + 6 = 0x4024B6
s: 0x4024b0 + 7 = 0x4024B7

不妨[0100][xxxx]，其中[xxxx] = 上面的偏移量
I 0x49
O 0x4F
N 0x4E
E 0x45
F 0x46
G 0x47

IONEFG

大概懂了
rbx = rdi
就是要我们用 ecx = [rbx + rax] 即 ecx = [rdi + rax(offset)] 

就是要我们用我们输入的字符，取其低4位，然后 0x4024b0 + 低4位，得到另一个字符
接着取 dl(char字符) 然后把数据存放到 0x10(%rsp) 中，循环6次
最后判断 0x10(%rsp) == "flyers"
该过程需要建立一个映射机制，使其获得 "flyers"


main
  400ea2: e8 f7 05 00 00        callq  40149e <read_line>
  400ea7: 48 89 c7              mov    %rax,%rdi
  400eaa: e8 b3 01 00 00        callq  401062 <phase_5>


0000000000401062 <phase_5>:
  401062: 53                    push   %rbx
  401063: 48 83 ec 20           sub    $0x20,%rsp
  401067: 48 89 fb              mov    %rdi,%rbx
  40106a: 64 48 8b 04 25 28 00  mov    %fs:0x28,%rax  ; 金丝雀?
  401071: 00 00 
  401073: 48 89 44 24 18        mov    %rax,0x18(%rsp)
  401078: 31 c0                 xor    %eax,%eax
  40107a: e8 9c 02 00 00        callq  40131b <string_length>
  40107f: 83 f8 06              cmp    $0x6,%eax
  401082: 74 4e                 je     4010d2 <phase_5+0x70>
  401084: e8 b1 03 00 00        callq  40143a <explode_bomb>
  401089: eb 47                 jmp    4010d2 <phase_5+0x70>
  40108b: 0f b6 0c 03           movzbl (%rbx,%rax,1),%ecx
  40108f: 88 0c 24              mov    %cl,(%rsp)
  401092: 48 8b 14 24           mov    (%rsp),%rdx
  401096: 83 e2 0f              and    $0xf,%edx
  401099: 0f b6 92 b0 24 40 00  movzbl 0x4024b0(%rdx),%edx
  4010a0: 88 54 04 10           mov    %dl,0x10(%rsp,%rax,1)
  4010a4: 48 83 c0 01           add    $0x1,%rax
  4010a8: 48 83 f8 06           cmp    $0x6,%rax
  4010ac: 75 dd                 jne    40108b <phase_5+0x29>
  4010ae: c6 44 24 16 00        movb   $0x0,0x16(%rsp)
  4010b3: be 5e 24 40 00        mov    $0x40245e,%esi
  4010b8: 48 8d 7c 24 10        lea    0x10(%rsp),%rdi
  4010bd: e8 76 02 00 00        callq  401338 <strings_not_equal>
  4010c2: 85 c0                 test   %eax,%eax
  4010c4: 74 13                 je     4010d9 <phase_5+0x77>
  4010c6: e8 6f 03 00 00        callq  40143a <explode_bomb>
  4010cb: 0f 1f 44 00 00        nopl   0x0(%rax,%rax,1)
  4010d0: eb 07                 jmp    4010d9 <phase_5+0x77>
  4010d2: b8 00 00 00 00        mov    $0x0,%eax
  4010d7: eb b2                 jmp    40108b <phase_5+0x29>
  4010d9: 48 8b 44 24 18        mov    0x18(%rsp),%rax
  4010de: 64 48 33 04 25 28 00  xor    %fs:0x28,%rax
  4010e5: 00 00 
  4010e7: 74 05                 je     4010ee <phase_5+0x8c>
  4010e9: e8 42 fa ff ff        callq  400b30 <__stack_chk_fail@plt>
  4010ee: 48 83 c4 20           add    $0x20,%rsp
  4010f2: 5b                    pop    %rbx
  4010f3: c3                    retq   






phase_6

main
  400ebe: e8 db 05 00 00        callq  40149e <read_line>
  400ec3: 48 89 c7              mov    %rax,%rdi
  400ec6: e8 29 02 00 00        callq  4010f4 <phase_6>


先 read_six_numbers
  401121: 76 05                 jbe    401128 <phase_6+0x34> 必须成立，不然爆炸

  401130: 74 21                 je     401153 <phase_6+0x5f>

  40116d: 75 f1                 jne    401160 <phase_6+0x6c> 不要满足

  401174: eb 21                 jmp    401197 <phase_6+0xa3>

  40119d: 7e e4                 jle    401183 <phase_6+0x8f>

  401195: 74 14                 je     4011ab <phase_6+0xb7>

  4011cb: 74 05                 je     4011d2 <phase_6+0xde>

  4011e7: 7d 05                 jge    4011ee <phase_6+0xfa> 必须成立，不然爆炸

  4011f5: 75 e8                 jne    4011df <phase_6+0xeb> 不满足时退出啦

read_six_numbers 调用所需要的参数 <rdi, rsi>
  rdi 输入的字符串首地址
  rsi = rsp(phase_6)
另外在调用前先保存现场 r13 = rsp 

read_six_numbers 调用后(期间还调用了sscanf)，其返回的参数（从 rdx 到 rsp+8是我们读的6个数字）
rdi 输入的字符串首地址
esi = 0x4025c3  ("%d %d %d %d %d %d") 其实是 sscanf 的第一个参数
rdx = rsi = rsp(phase_2)
rcx = rsi + 4
r8 = rsi + 8
r9 = rsi + c(12)
第5、6参数：
rsp 是 read_six_numbers 的栈指针，在其栈内存放地址映射到 phase_2 的栈里(rsi)
[rsp] = rsi + 0x10
[rsp + 8] = rsi + 0x14

阅读以下代码，发现需要让 eax - 1 >= 5 (无符号)
rbp = rsp，eax = [rsp] 就是第5个参数，即让第五个参数 -1 >= 5 (无符号)

  401106: e8 51 03 00 00        callq  40145c <read_six_numbers>
  40110b: 49 89 e6              mov    %rsp,%r14
  40110e: 41 bc 00 00 00 00     mov    $0x0,%r12d
  401114: 4c 89 ed              mov    %r13,%rbp
  401117: 41 8b 45 00           mov    0x0(%r13),%eax
  40111b: 83 e8 01              sub    $0x1,%eax
  40111e: 83 f8 05              cmp    $0x5,%eax
  401121: 76 05                 jbe    401128 <phase_6+0x34>
  401123: e8 12 03 00 00        callq  40143a <explode_bomb>

接着阅读，发现这个代码的逻辑是要求 rdx(即第一个参数) != 后面5个参数
一开始 ebx = rax = 1
if [rsp] != eax ; 必须不等于，不然爆炸
其中 [rsp] 相当于 rdx，即第一个参数
接着 ebx ++，判断 ebx <= 5 继续循环
整个过程相当于
[rsp] != [rsp + 4 * offset], offset = [1,2,3,4,5]

  401128: 41 83 c4 01           add    $0x1,%r12d
  40112c: 41 83 fc 06           cmp    $0x6,%r12d
  401130: 74 21                 je     401153 <phase_6+0x5f>
  401132: 44 89 e3              mov    %r12d,%ebx
  401135: 48 63 c3              movslq %ebx,%rax
  401138: 8b 04 84              mov    (%rsp,%rax,4),%eax
  40113b: 39 45 00              cmp    %eax,0x0(%rbp)
  40113e: 75 05                 jne    401145 <phase_6+0x51>
  401140: e8 f5 02 00 00        callq  40143a <explode_bomb>
  401145: 83 c3 01              add    $0x1,%ebx
  401148: 83 fb 05              cmp    $0x5,%ebx
  40114b: 7e e8                 jle    401135 <phase_6+0x41>

接着你以为就要结束了，结果它会回到头重新来一次，阅读上半部分代码后，
我们很快理解：
每个参数 - 1 >= 5 都要成立，并且每个参数与后面的参数都要不同
所以理解了 r12d 一开始为0，设置 r12d 直到为6才退出
  40114d: 49 83 c5 04           add    $0x4,%r13
  401151: eb c1                 jmp    401114 <phase_6+0x20>


继续阅读，可以看到
%rsi = %rsp + 0x18 看起来应该是终止循环条件
该代码过程相当于 [rsp + 4 * offset] = 7 - [rsp + 4 * offset], offset = [0,1,2,3,4,5]
也就是对应我们输入的6个数字都要减去7

  401153: 48 8d 74 24 18        lea    0x18(%rsp),%rsi
  401158: 4c 89 f0              mov    %r14,%rax
  40115b: b9 07 00 00 00        mov    $0x7,%ecx
  401160: 89 ca                 mov    %ecx,%edx
  401162: 2b 10                 sub    (%rax),%edx
  401164: 89 10                 mov    %edx,(%rax)
  401166: 48 83 c0 04           add    $0x4,%rax
  40116a: 48 39 f0              cmp    %rsi,%rax
  40116d: 75 f1                 jne    401160 <phase_6+0x6c>

继续阅读，发现套路类似
%rsi = %rsp + 0x18 也是循环终止条件
另外我们可以看到要想退出需要让 
je     4011ab <phase_6+0xb7> 条件满足
因此有以下逻辑
7 - 我们输入的6个数字 <= 1 (有符号) 要成立
暂时不清楚 edx = 0x6032d0 放置到 [rsp + 2 * rsi + 0x20] 有什么用，rsi = [0,4,8,12,16,20]

  40116f: be 00 00 00 00        mov    $0x0,%esi

  401174: eb 21                 jmp    401197 <phase_6+0xa3>
  401176: 48 8b 52 08           mov    0x8(%rdx),%rdx        ; 遍历链表，node[i]->next
  40117a: 83 c0 01              add    $0x1,%eax
  40117d: 39 c8                 cmp    %ecx,%eax
  40117f: 75 f5                 jne    401176 <phase_6+0x82>

  401181: eb 05                 jmp    401188 <phase_6+0x94>
  401183: ba d0 32 60 00        mov    $0x6032d0,%edx

  401188: 48 89 54 74 20        mov    %rdx,0x20(%rsp,%rsi,2)
  40118d: 48 83 c6 04           add    $0x4,%rsi
  401191: 48 83 fe 18           cmp    $0x18,%rsi
  401195: 74 14                 je     4011ab <phase_6+0xb7>

  401197: 8b 0c 34              mov    (%rsp,%rsi,1),%ecx
  40119a: 83 f9 01              cmp    $0x1,%ecx
  40119d: 7e e4                 jle    401183 <phase_6+0x8f>
  40119f: b8 01 00 00 00        mov    $0x1,%eax
  4011a4: ba d0 32 60 00        mov    $0x6032d0,%edx
  4011a9: eb cb                 jmp    401176 <phase_6+0x82>


阅读，发现逻辑为
[[rsp + 0x20(offset1)] + 0x8] = [rsp + 0x28(offset2)]
offset1: 0x20 0x28 0x30 0x38 0x40 0x48
offset2: 0x28 0x30 0x38 0x40 0x48 0x50
看起来是传送数据

链表？确实如此
  (gdb) x/30 0x6032d0
  0x6032d0 <node1>: 0x0000014c  0x00000001  0x006032e0  0x00000000
  0x6032e0 <node2>: 0x000000a8  0x00000002  0x006032f0  0x00000000
  0x6032f0 <node3>: 0x0000039c  0x00000003  0x00603300  0x00000000
  0x603300 <node4>: 0x000002b3  0x00000004  0x00603310  0x00000000
  0x603310 <node5>: 0x000001dd  0x00000005  0x00603320  0x00000000
  0x603320 <node6>: 0x000001bb  0x00000006  0x00000000  0x00000000

(gdb) x/24w 0x6032d0
0x6032d0 <node1>: 332     1 6304480 0
0x6032e0 <node2>: 168     2 6304496 0
0x6032f0 <node3>: 924     3 6304512 0
0x603300 <node4>: 691     4 6304528 0
0x603310 <node5>: 477     5 6304544 0
0x603320 <node6>: 443     6 0 0
为啥是 p->next又next？
[rsp+0x20] 取内存值，然后加 0x8 偏移，不难想到[rsp+0x20]是个指针值，+8又跑到另一个指针的首地址了
(p->next)->next = q->next
0x20->0x28->0x30->0x38->0x40->0x48->0x50

  4011ab: 48 8b 5c 24 20        mov    0x20(%rsp),%rbx
  4011b0: 48 8d 44 24 28        lea    0x28(%rsp),%rax
  4011b5: 48 8d 74 24 50        lea    0x50(%rsp),%rsi
  4011ba: 48 89 d9              mov    %rbx,%rcx
  4011bd: 48 8b 10              mov    (%rax),%rdx
  4011c0: 48 89 51 08           mov    %rdx,0x8(%rcx)
  4011c4: 48 83 c0 08           add    $0x8,%rax
  4011c8: 48 39 f0              cmp    %rsi,%rax
  4011cb: 74 05                 je     4011d2 <phase_6+0xde>
  4011cd: 48 89 d1              mov    %rdx,%rcx
  4011d0: eb eb                 jmp    4011bd <phase_6+0xc9>

综合条件：
    第五个参数 - 1 >= 5 (无符号)
    rdx(即第一个参数) != 后面5个参数
  每个参数 - 1 >= 5 都要成立，并且每个参数与后面的参数都要不同

  该代码过程相当于 [rsp + 4 * offset] = 7 - [rsp + 4 * offset], offset = [0,1,2,3,4,5]
  也就是对应我们输入的6个数字都要减去7




00000000004010f4 <phase_6>:
  4010f4: 41 56                 push   %r14
  4010f6: 41 55                 push   %r13
  4010f8: 41 54                 push   %r12
  4010fa: 55                    push   %rbp
  4010fb: 53                    push   %rbx
  4010fc: 48 83 ec 50           sub    $0x50,%rsp

  401100: 49 89 e5              mov    %rsp,%r13
  401103: 48 89 e6              mov    %rsp,%rsi
  401106: e8 51 03 00 00        callq  40145c <read_six_numbers>

  40110b: 49 89 e6              mov    %rsp,%r14
  40110e: 41 bc 00 00 00 00     mov    $0x0,%r12d
  401114: 4c 89 ed              mov    %r13,%rbp
  401117: 41 8b 45 00           mov    0x0(%r13),%eax
  40111b: 83 e8 01              sub    $0x1,%eax
  40111e: 83 f8 05              cmp    $0x5,%eax
  401121: 76 05                 jbe    401128 <phase_6+0x34>
  401123: e8 12 03 00 00        callq  40143a <explode_bomb>
  401128: 41 83 c4 01           add    $0x1,%r12d
  40112c: 41 83 fc 06           cmp    $0x6,%r12d
  401130: 74 21                 je     401153 <phase_6+0x5f>
  401132: 44 89 e3              mov    %r12d,%ebx
  401135: 48 63 c3              movslq %ebx,%rax
  401138: 8b 04 84              mov    (%rsp,%rax,4),%eax
  40113b: 39 45 00              cmp    %eax,0x0(%rbp)
  40113e: 75 05                 jne    401145 <phase_6+0x51>
  401140: e8 f5 02 00 00        callq  40143a <explode_bomb>
  401145: 83 c3 01              add    $0x1,%ebx
  401148: 83 fb 05              cmp    $0x5,%ebx
  40114b: 7e e8                 jle    401135 <phase_6+0x41>
  40114d: 49 83 c5 04           add    $0x4,%r13
  401151: eb c1                 jmp    401114 <phase_6+0x20>

  401153: 48 8d 74 24 18        lea    0x18(%rsp),%rsi
  401158: 4c 89 f0              mov    %r14,%rax
  40115b: b9 07 00 00 00        mov    $0x7,%ecx
  401160: 89 ca                 mov    %ecx,%edx
  401162: 2b 10                 sub    (%rax),%edx
  401164: 89 10                 mov    %edx,(%rax)
  401166: 48 83 c0 04           add    $0x4,%rax
  40116a: 48 39 f0              cmp    %rsi,%rax
  40116d: 75 f1                 jne    401160 <phase_6+0x6c>

  40116f: be 00 00 00 00        mov    $0x0,%esi
  401174: eb 21                 jmp    401197 <phase_6+0xa3>
  401176: 48 8b 52 08           mov    0x8(%rdx),%rdx
  40117a: 83 c0 01              add    $0x1,%eax
  40117d: 39 c8                 cmp    %ecx,%eax
  40117f: 75 f5                 jne    401176 <phase_6+0x82>
  401181: eb 05                 jmp    401188 <phase_6+0x94>
  401183: ba d0 32 60 00        mov    $0x6032d0,%edx
  401188: 48 89 54 74 20        mov    %rdx,0x20(%rsp,%rsi,2)
  40118d: 48 83 c6 04           add    $0x4,%rsi
  401191: 48 83 fe 18           cmp    $0x18,%rsi
  401195: 74 14                 je     4011ab <phase_6+0xb7>
  401197: 8b 0c 34              mov    (%rsp,%rsi,1),%ecx
  40119a: 83 f9 01              cmp    $0x1,%ecx
  40119d: 7e e4                 jle    401183 <phase_6+0x8f>
  40119f: b8 01 00 00 00        mov    $0x1,%eax
  4011a4: ba d0 32 60 00        mov    $0x6032d0,%edx
  4011a9: eb cb                 jmp    401176 <phase_6+0x82>

  4011ab: 48 8b 5c 24 20        mov    0x20(%rsp),%rbx
  4011b0: 48 8d 44 24 28        lea    0x28(%rsp),%rax
  4011b5: 48 8d 74 24 50        lea    0x50(%rsp),%rsi
  4011ba: 48 89 d9              mov    %rbx,%rcx
  4011bd: 48 8b 10              mov    (%rax),%rdx
  4011c0: 48 89 51 08           mov    %rdx,0x8(%rcx)
  4011c4: 48 83 c0 08           add    $0x8,%rax
  4011c8: 48 39 f0              cmp    %rsi,%rax
  4011cb: 74 05                 je     4011d2 <phase_6+0xde>
  4011cd: 48 89 d1              mov    %rdx,%rcx
  4011d0: eb eb                 jmp    4011bd <phase_6+0xc9>

  4011d2: 48 c7 42 08 00 00 00  movq   $0x0,0x8(%rdx)   ; 最后一个next置0
  4011d9: 00 
  4011da: bd 05 00 00 00        mov    $0x5,%ebp
  4011df: 48 8b 43 08           mov    0x8(%rbx),%rax
  4011e3: 8b 00                 mov    (%rax),%eax
  4011e5: 39 03                 cmp    %eax,(%rbx)
  4011e7: 7d 05                 jge    4011ee <phase_6+0xfa>
  4011e9: e8 4c 02 00 00        callq  40143a <explode_bomb>
  4011ee: 48 8b 5b 08           mov    0x8(%rbx),%rbx
  4011f2: 83 ed 01              sub    $0x1,%ebp
  4011f5: 75 e8                 jne    4011df <phase_6+0xeb>

  4011f7: 48 83 c4 50           add    $0x50,%rsp
  4011fb: 5b                    pop    %rbx
  4011fc: 5d                    pop    %rbp
  4011fd: 41 5c                 pop    %r12
  4011ff: 41 5d                 pop    %r13
  401201: 41 5e                 pop    %r14
  401203: c3                    retq   





esi = 0
ecx = 7

ecx = [rsp + rsi]
if (ecx <= 1) {
    edx = 0x6032d0
    [rsp+2rsi+0x20] = rdx
} else {
    
}


也就是

if (num[i] <= 1) {
    edx = 0x6032d0
    [rsp+2rsi+0x20] = rdx
} else {
    eax = 1
    edx = 0x6032d0
    rdx = num[i+1]
    eax += 1  // 看起来必须让 eax = 7 

    [rsp+2rsi+0x20] = rdx
    rsi += 4
    if (rsi == 0x18) break; // 退出循环

    ecx = [rsp+rsi]
}

[]si 是 i

for (int i = 0; i < 6; i ++) {
   int cx = num[i]
   if (cx <= 1) {
        node[i] =
   } else {
        i ++;
        edx = 0x6032d0;
        rdx = num[i];
        i ++;
        if (i <= cx)
   }
}

// 省略了部分[r][e]
si = 0
loop:
    cx = [rsp+rsi] (cx=num[0]、num[1]...num[5])
    if (cx <= 1) {  // 选取 <=1的没有，就直接头链赋值好了
        dx = 0x6032d0
        [rsp+0x20+2rsi] = dx

    } else {
        ax = 1
        dx = 0x6032d0

        do {
            dx = dx->next
            ax ++
        } while (ax != cx)  // 看起来输入参数决定选取第几个链表

        // rsp+0x20 是某个变量的地址空间
        // 2rsi 0、8、16...
        [rsp+0x20+2rsi] = dx   // node[rsi] = dx
        rsi += 4
        if (rsi == 0x18) 退出循环
        goto loop
    }

懂了
就是我们会枚举当前链表i，然后选取第cx个节点，将i的指针指向该节点
node[i]->next = node[cx]


struct node {
    int x;
    int y;
    node* next;
}

rbx = [rsp+0x20] = &node[0]
rax = [rsp+0x28] = (rsp->)node[1]
rsi = [rsp+0x50] = (rsp->)&node[6]  // 6*16 = 96 边界检测
rcx = rbx = &node[0]
loop:
    rdx = [rax] = node[1].x

    [rcx+0x8] = rdx
    [rcx+0x8] 即 node[0]->next
        (node[0]->next).x = node[1].x
    rax += 8
    if (rax == rsi) break

    rcx = rdx = node[1].x
    goto loop


(node[i]->next).x = node[i+1].x

rax -> i，i初始为1
可以认为 rdx = node[i].x
初始 rcx = node[0]，


;;;;;

ebp = 5
rax = [rbx+0x8] = &(node[0]->next)
eax = [rax] = (node[0]->next).x
if (node[0].x > (node[0]->next).x) boom
阅读后可知道
需要让 node.x 从高到低，降序

即让值如此排列：
(924) -> (691) -> (477) -> (443) -> (332) -> (168)
相应的结点序号序列应该是
(3) -> (4) -> (5) -> (6) -> (1) -> (2)

然后由于是 7 - num[i]，因此为
4 3 2 1 6 5









